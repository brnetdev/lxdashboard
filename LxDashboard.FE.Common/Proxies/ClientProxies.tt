<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ServiceModel" #>
<#@ assembly name="$(TargetDir)\LxDashboard.BE.Contracts.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.ServiceModel" #>
<#@ output extension=".cs" #>

/*
This code is generated. Do not change here any code, it will by overwirtten. 

*/

using System.ServiceModel;
using LxDashboard.BE.Contracts;
using LxDashboard.BE.Contracts.Services;

namespace LxDashboard.FE.Common.Proxies 
{
<# PushIndent("\t"); #>

<# 
GetAllServices();
foreach(var service in services)
{
#>

public partial class <#= service.Name #>Proxy : ClientBase<<#= service.ContractInterface#>>, <#= service.ContractInterface #>
{
	<# PushIndent("\t"); #>

	public <#= service.Name #>Proxy() : base("<#= service.ConfigurationName #>") {}

	<# foreach(var method in service.Methods) { #>	
	public <#= method.ReturnType + " " + method.Name + "("+method.Params+")" #>
	{	
		<#= method.ReturnType == "void" ?  method.Body : "return "+method.Body #>;
	}	
	<# } #>
	<# PopIndent(); #>

}
<#
}
#>

<# PopIndent(); #>	
}

<#+

private class Method
{
	public string ReturnType { get;set; }
	public string Name { get;set; }
	public string Body { get; set; }
	public string Params { get;set; }
	public string Args { get; set; }
}

private class Service
{
	public string Name { get; set;}
	public string ConfigurationName { get; set; }
	public string ContractInterface { get; set; }

	public List<Method> Methods { get; set; } = new List<Method>();

}
	private List<Service> services = new List<Service>();
	
	private void GetAllServices()
	{

		var serviceContracts = Assembly.LoadFrom(@"D:\LxOrganizer\Project\LxDashboard\LxDashboard.FE.Common\bin\Debug\LxDashboard.BE.Contracts.dll").GetTypes().Where(t=> t.IsInterface && t.GetCustomAttributes().Any(a=>a is ServiceContractAttribute));
		serviceContracts.ToList().ForEach(s => 
		{
			var attr = (ServiceContractAttribute)s.GetCustomAttribute(typeof(ServiceContractAttribute));
			var service = new Service();
			service.Name = attr.Name;
			service.ConfigurationName = attr.ConfigurationName;
			service.ContractInterface = s.Name;


			var methods = s.GetMethods();
			foreach(var method in methods)
			{	
				var strParams = string.Empty;
				method.GetParameters().ToList().ForEach(p=>
				{
					strParams += $"{p.ParameterType.ToString()} {p.Name}, ";
				});
				strParams = strParams.Remove(strParams.Length - 2);	
				var strArgs = string.Empty;
				method.GetParameters().ToList().ForEach(p =>
				{
					strArgs += $"{p.Name}, ";
				});
				strArgs = strArgs.Remove(strArgs.Length - 2);
				string methodBody = string.Empty;
				service.Methods.Add(new Method
				{
					ReturnType = method.ReturnType == typeof(void) ? "void" : method.ReturnType.ToString(),
					Name = method.Name,
					Params = strParams,
					Args = strArgs,
					Body = $"Channel.{method.Name}({strArgs})"

				});
			}		

			services.Add(service);
		});        


	}	
#>


